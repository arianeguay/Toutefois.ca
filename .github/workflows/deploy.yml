# .github/workflows/deploy.yml
name: Deploy to DigitalOcean (Next.js)

on:
  push:
    branches:
      - main
    paths:
      - "frontend/**"
      - "wp-content/**"
      - "nginx/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:
    inputs:
      skip_ssl:
        description: "Skip SSL certificate renewal"
        required: false
        default: "false"
        type: boolean

env:
  NODE_VERSION: "20"
  YARN_CACHE_FOLDER: ~/.yarn

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy backend files via rsync
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete --exclude='.git*' --exclude='frontend/' --exclude='node_modules' --exclude='*.log'
          path: "./"
          remote_path: "/var/www/toutefois_app"
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure WordPress and Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "=== WordPress & Nginx Configuration ==="
            # Configure WordPress
            sudo mkdir -p /var/www/wordpress/wp-content/{plugins,themes,uploads}
            sudo rsync -avz --delete /var/www/toutefois_app/wp-content/plugins/ /var/www/wordpress/wp-content/plugins/
            sudo rsync -avz --delete /var/www/toutefois_app/wp-content/themes/ /var/www/wordpress/wp-content/themes/
            sudo find /var/www/wordpress/wp-content -type d -exec chmod 755 {} \;
            sudo find /var/www/wordpress/wp-content -type f -exec chmod 644 {} \;
            sudo chown -R www-data:www-data /var/www/wordpress/wp-content
            # Configure Nginx for WordPress Admin
            sudo cp /var/www/toutefois_app/nginx/sites-available/admin.toutefois.arianeguay.ca.conf /etc/nginx/sites-available/
            sudo ln -sf /etc/nginx/sites-available/admin.toutefois.arianeguay.ca.conf /etc/nginx/sites-enabled/admin.toutefois.arianeguay.ca.conf
            # Reload services
            sudo systemctl reload nginx
            sudo systemctl reload php8.1-fpm
            echo "=== Backend Deployed Successfully ==="

  build-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    outputs:
      cache-hit: ${{ steps.yarn-cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: "frontend/yarn.lock"

      - name: Cache Yarn dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn
            frontend/node_modules
            frontend/.next/cache
          key: ${{ runner.os }}-yarn-nextjs-${{ hashFiles('frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-nextjs-

      - name: Install dependencies
        working-directory: frontend
        run: |
          if [[ "${{ steps.yarn-cache.outputs.cache-hit }}" != "true" ]]; then
            yarn install --prefer-offline
          fi

      - name: Build Frontend
        working-directory: frontend
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.REACT_APP_API_URL }}
          NODE_ENV: production
        run: |
          # Use package.json.next if it exists
          if [ -f "package.json.next" ]; then
            mv package.json package.json.old
            mv package.json.next package.json
          fi

          # Use tsconfig.next.json if it exists
          if [ -f "tsconfig.next.json" ]; then
            mv tsconfig.json tsconfig.json.old
            mv tsconfig.next.json tsconfig.json
          fi

          # Build the Next.js app
          yarn build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-nextjs-${{ github.sha }}
          path: |
            frontend/.next/
            frontend/public/
            frontend/next.config.mjs
            frontend/package.json
          retention-days: 1


  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-nextjs-${{ github.sha }}
          path: frontend-build/

      - name: Deploy frontend files via rsync
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avzr --delete
          path: "frontend-build/"
          remote_path: "/var/www/frontend"
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Frontend Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "=== Frontend Server Configuration ==="
            cd /var/www/frontend
            # Install production dependencies
            sudo yarn install --production --frozen-lockfile
            # Set up PM2
            sudo npm install -g pm2
            cat << EOF | sudo tee ecosystem.config.js
            module.exports = {
              apps: [
                {
                  name: 'toutefois',
                  script: 'yarn',
                  args: 'start',
                  env: { NODE_ENV: 'production', PORT: 3000 }
                }
              ]
            };
            EOF
            # Start or restart app
            if sudo pm2 describe toutefois > /dev/null; then
              sudo pm2 reload toutefois
            else
              sudo pm2 start ecosystem.config.js
            fi
            sudo pm2 save
            sudo pm2 startup
            echo "=== Frontend Deployed Successfully ==="

  finalize-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    steps:
      - name: Finalize and Verify
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "=== Finalizing Deployment ==="
            # Final Nginx config for frontend
            cat << EOF | sudo tee /etc/nginx/sites-available/toutefois.arianeguay.ca.conf
            server {
                listen 80; server_name toutefois.arianeguay.ca;
                location / { return 301 https://\$host\$request_uri; }
            }
            server {
                listen 443 ssl http2; server_name toutefois.arianeguay.ca;
                ssl_certificate /etc/letsencrypt/live/toutefois.arianeguay.ca/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/toutefois.arianeguay.ca/privkey.pem;
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host \$host;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF
            sudo ln -sf /etc/nginx/sites-available/toutefois.arianeguay.ca.conf /etc/nginx/sites-enabled/toutefois.arianeguay.ca.conf
            # Test and reload Nginx
            sudo nginx -t && sudo systemctl reload nginx
            echo "=== Nginx and Frontend Configured ==="


  finalize-deployment:
    runs-on: ubuntu-latest
    needs: [setup-ssl]
    if: always() && (needs.setup-ssl.result == 'success' || needs.setup-ssl.result == 'skipped')
    steps:
      - name: Reload Services and Verify Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 300s
          script: |
            set -e
            echo "=== Finalizing Deployment ==="

            # Final nginx test and reload
            echo "Final Nginx configuration test..."
            sudo nginx -t

            echo "Reloading Nginx..."
            sudo systemctl reload nginx

            # Verify services are running
            echo "Verifying services..."
            sudo systemctl is-active nginx || { echo "Nginx is not running!"; exit 1; }
            sudo pm2 list
            sudo pm2 describe toutefois || { echo "Next.js app is not running!"; exit 1; }

            # Test website accessibility
            echo "Testing website accessibility..."
            curl -f -s -o /dev/null https://toutefois.arianeguay.ca || echo "Warning: Main site not accessible"
            curl -f -s -o /dev/null https://admin.toutefois.arianeguay.ca || echo "Warning: Admin site not accessible"

            # Clean up old backups (keep last 5)
            echo "Cleaning up old backups..."
            sudo find /var/backups -name "wordpress-*" -type d | sort | head -n -5 | sudo xargs rm -rf 2>/dev/null || true
            sudo find /var/backups -name "frontend-*" -type d | sort | head -n -5 | sudo xargs rm -rf 2>/dev/null || true
            sudo find /var/backups -name "nginx-*" -type d | sort | head -n -5 | sudo xargs rm -rf 2>/dev/null || true

            echo "=== Deployment completed successfully! ==="
            echo "Frontend: https://toutefois.arianeguay.ca"
            echo "Admin: https://admin.toutefois.arianeguay.ca"
            echo "Build SHA: ${{ github.sha }}"
